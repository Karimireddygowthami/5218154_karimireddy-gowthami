#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char** split_string(char*);

/* ---------- Detonation helper ---------- */
char** detonate(char** grid, int r, int c) {
    char** result = malloc(r * sizeof(char*));
    for (int i = 0; i < r; i++) {
        result[i] = malloc((c + 1) * sizeof(char));
        for (int j = 0; j < c; j++) {
            result[i][j] = 'O';
        }
        result[i][c] = '\0';
    }

    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            if (grid[i][j] == 'O') {
                result[i][j] = '.';
                if (i > 0) result[i-1][j] = '.';
                if (i < r-1) result[i+1][j] = '.';
                if (j > 0) result[i][j-1] = '.';
                if (j < c-1) result[i][j+1] = '.';
            }
        }
    }
    return result;
}

/* ---------- Main Bomberman logic ---------- */
char** bomberMan(int n, int grid_count, char** grid, int* result_count) {
    int r = grid_count;
    int c = strlen(grid[0]);
    *result_count = r;

    if (n == 1) {
        return grid;
    }
    if (n % 2 == 0) {
        char** full = malloc(r * sizeof(char*));
        for (int i = 0; i < r; i++) {
            full[i] = malloc((c + 1) * sizeof(char));
            for (int j = 0; j < c; j++) {
                full[i][j] = 'O';
            }
            full[i][c] = '\0';
        }
        return full;
    }

    char** first = detonate(grid, r, c);
    char** second = detonate(first, r, c);

    if (n % 4 == 3) {
        return first;
    } else {
        return second;
    }
}

/* ---------- Main driver ---------- */
int main()
{
    char** rcn = split_string(readline());

    int r = strtol(rcn[0], NULL, 10);
    int c = strtol(rcn[1], NULL, 10);
    int n = strtol(rcn[2], NULL, 10);

    char** grid = malloc(r * sizeof(char*));
    for (int i = 0; i < r; i++) {
        char* row = readline();
        grid[i] = row;
    }

    int result_count;
    char** result = bomberMan(n, r, grid, &result_count);

    for (int i = 0; i < result_count; i++) {
        printf("%s\n", result[i]);
    }

    return 0;
}

/* ---------- HackerRank boilerplate ---------- */
char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) break;

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) break;
    }

    if (data[data_length - 1] == '\n') data[data_length - 1] = '\0';

    data = realloc(data, data_length + 1);

    return data;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}
