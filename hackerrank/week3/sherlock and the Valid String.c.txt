#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

static int cmp_int(const void *a, const void *b) {
    return (*(const int*)a - *(const int*)b);
}

char* isValid(char* s) {
    static char YES[] = "YES";
    static char NO[]  = "NO";

    int freq[26] = {0};
    for (int i = 0; s[i] != '\0'; i++) {
        if (s[i] >= 'a' && s[i] <= 'z') freq[s[i] - 'a']++;
    }

    int a[26], m = 0;
    for (int i = 0; i < 26; i++) if (freq[i] > 0) a[m++] = freq[i];
    if (m <= 1) return YES;

    qsort(a, m, sizeof(int), cmp_int);

    if (a[0] == a[m-1]) return YES;                                 
    if (a[0] == 1 && a[1] == a[m-1]) return YES;                    
    if (a[0] == a[m-2] && a[m-1] == a[m-2] + 1) return YES;          

    return NO;
}

int main() {
    char* s = readline();
    char* result = isValid(s);
    printf("%s\n", result);
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);
    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) break;
        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;
        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) break;
    }
    if (data_length > 0 && data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }
    return data;
}
