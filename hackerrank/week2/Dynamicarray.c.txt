#include <stdio.h>
#include <stdlib.h>

int* dynamicArray(int n, int queries_rows, int queries_columns, int** queries, int* result_count) {
    int lastAnswer = 0;
    int** arr = malloc(n * sizeof(int*));
    int* sizes = calloc(n, sizeof(int));
    int* capacities = calloc(n, sizeof(int));

    int* results = malloc(queries_rows * sizeof(int));
    int res_index = 0;

    for (int i = 0; i < n; i++) {
        capacities[i] = 1;
        arr[i] = malloc(capacities[i] * sizeof(int));
    }

    for (int i = 0; i < queries_rows; i++) {
        int type = queries[i][0];
        int x = queries[i][1];
        int y = queries[i][2];
        int idx = (x ^ lastAnswer) % n;

        if (type == 1) {
            if (sizes[idx] == capacities[idx]) {
                capacities[idx] *= 2;
                arr[idx] = realloc(arr[idx], capacities[idx] * sizeof(int));
            }
            arr[idx][sizes[idx]++] = y;
        } else if (type == 2) {
            int value = arr[idx][y % sizes[idx]];
            lastAnswer = value;
            results[res_index++] = lastAnswer;
        }
    }

    *result_count = res_index;
    return results;
}

int main() {
    int n, q;
    scanf("%d %d", &n, &q);

    int** queries = malloc(q * sizeof(int*));
    for (int i = 0; i < q; i++) {
        queries[i] = malloc(3 * sizeof(int));
        scanf("%d %d %d", &queries[i][0], &queries[i][1], &queries[i][2]);
    }

    int result_count;
    int* results = dynamicArray(n, q, 3, queries, &result_count);

    for (int i = 0; i < result_count; i++) {
        printf("%d\n", results[i]);
    }

    return 0;
}
